
server:
  port: ${SERVER_PORT:8080}
spring:
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:ezpark_db}
    username: ${DB_USERNAME:ezpark_user}
    password: ${DB_PASSWORD:ezpark123}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        hbm2ddl:
          default_schema: public
        format_sql: true
    show-sql: false
    defer-datasource-initialization: true #We have to ensure that the values are not created multiple times.
                                          # If our database schema is created by Hibernate, we should also add the following property to run our script only after Hibernate made its changes.

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        "[spring.json.add.type.headers]": false
        linger.ms: 0
        batch.size: 16384
        buffer.memory: 33554432

    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: false
      properties:
        session.timeout.ms: 10000
        heartbeat.interval.ms: 3000
        #        "[spring.json.value.default.type]": "*"
        "[spring.json.trusted.packages]": "com.ezpark.io"
        group-id: reservation-ctx-group
  listener:
    type: single
#    ack-mode: manual_immediate
    # ðŸ‘‡ Skip bad records
#    missing-topics-fatal: false

kafka:
  topics:
    reservation-events: reservation-events
    payment-events: payment-events
    parking-events: parking-events
    customer-events: customer-events

###################

logging:
  level:
    com.ezpark.io: ${LOG_LEVEL_APP:DEBUG}
    org.hibernate.SQL: ${LOG_LEVEL_HIBERNATE:DEBUG}
    org.springframework.kafka: ${LOG_LEVEL_KAFKA:DEBUG}
    org.springframework.transaction: DEBUG

